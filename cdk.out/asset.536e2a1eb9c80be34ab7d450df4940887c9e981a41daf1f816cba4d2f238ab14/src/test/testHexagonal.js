"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TaskService_1 = require("../application/services/TaskService");
/**
 * In-memory implementation of TaskRepository for testing
 * This demonstrates how we can easily swap implementations in hexagonal architecture
 */
class InMemoryTaskRepository {
    constructor() {
        this.tasks = new Map();
    }
    async save(task) {
        this.tasks.set(task.getId(), task);
        return task;
    }
    async findById(id) {
        const task = this.tasks.get(id);
        return task || null;
    }
    async findAll() {
        return Array.from(this.tasks.values());
    }
    async update(task) {
        this.tasks.set(task.getId(), task);
        return task;
    }
    async delete(id) {
        return this.tasks.delete(id);
    }
}
/**
 * Test function to demonstrate hexagonal architecture
 */
async function testHexagonalArchitecture() {
    console.log('Testing Hexagonal Architecture...');
    // Create an in-memory repository implementation
    const taskRepository = new InMemoryTaskRepository();
    // Create the service with the repository
    const taskService = new TaskService_1.TaskService(taskRepository);
    // Create a new task
    console.log('Creating a new task...');
    const task = await taskService.createTask('Test Task', 'This is a test task');
    console.log('Task created:', task);
    // Get the task by ID
    console.log('\nGetting task by ID...');
    const retrievedTask = await taskService.getTask(task.getId());
    console.log('Retrieved task:', retrievedTask);
    // Update the task
    console.log('\nUpdating task...');
    const updatedTask = await taskService.updateTask(task.getId(), 'Updated Task', 'This task has been updated');
    console.log('Updated task:', updatedTask);
    // Complete the task
    console.log('\nCompleting task...');
    const completedTask = await taskService.completeTask(task.getId());
    console.log('Completed task:', completedTask);
    // Get all tasks
    console.log('\nGetting all tasks...');
    const allTasks = await taskService.getAllTasks();
    console.log('All tasks:', allTasks);
    // Delete the task
    console.log('\nDeleting task...');
    const deleted = await taskService.deleteTask(task.getId());
    console.log('Task deleted:', deleted);
    // Verify task is deleted
    console.log('\nVerifying task is deleted...');
    const deletedTask = await taskService.getTask(task.getId());
    console.log('Task after deletion (should be null):', deletedTask);
}
// Run the test
testHexagonalArchitecture().catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdEhleGFnb25hbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0L3Rlc3RIZXhhZ29uYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxxRUFBa0U7QUFFbEU7OztHQUdHO0FBQ0gsTUFBTSxzQkFBc0I7SUFBNUI7UUFDVSxVQUFLLEdBQXNCLElBQUksR0FBRyxFQUFFLENBQUM7SUF3Qi9DLENBQUM7SUF0QkMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFVO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQVU7UUFDdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEMsT0FBTyxJQUFJLElBQUksSUFBSSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTztRQUNYLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBVTtRQUNyQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFVO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0IsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxLQUFLLFVBQVUseUJBQXlCO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLENBQUMsQ0FBQztJQUVqRCxnREFBZ0Q7SUFDaEQsTUFBTSxjQUFjLEdBQUcsSUFBSSxzQkFBc0IsRUFBRSxDQUFDO0lBRXBELHlDQUF5QztJQUN6QyxNQUFNLFdBQVcsR0FBRyxJQUFJLHlCQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFcEQsb0JBQW9CO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN0QyxNQUFNLElBQUksR0FBRyxNQUFNLFdBQVcsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLHFCQUFxQixDQUFDLENBQUM7SUFDOUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFbkMscUJBQXFCO0lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUN2QyxNQUFNLGFBQWEsR0FBRyxNQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDOUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUU5QyxrQkFBa0I7SUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sV0FBVyxHQUFHLE1BQU0sV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsY0FBYyxFQUFFLDRCQUE0QixDQUFDLENBQUM7SUFDN0csT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFMUMsb0JBQW9CO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUNwQyxNQUFNLGFBQWEsR0FBRyxNQUFNLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUU5QyxnQkFBZ0I7SUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pELE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRXBDLGtCQUFrQjtJQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDbEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRXRDLHlCQUF5QjtJQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDOUMsTUFBTSxXQUFXLEdBQUcsTUFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUVELGVBQWU7QUFDZix5QkFBeUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUYXNrIH0gZnJvbSAnLi4vZG9tYWluL21vZGVscy9UYXNrJztcbmltcG9ydCB7IFRhc2tSZXBvc2l0b3J5IH0gZnJvbSAnLi4vYXBwbGljYXRpb24vcG9ydHMvb3V0L1Rhc2tSZXBvc2l0b3J5JztcbmltcG9ydCB7IFRhc2tTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwbGljYXRpb24vc2VydmljZXMvVGFza1NlcnZpY2UnO1xuXG4vKipcbiAqIEluLW1lbW9yeSBpbXBsZW1lbnRhdGlvbiBvZiBUYXNrUmVwb3NpdG9yeSBmb3IgdGVzdGluZ1xuICogVGhpcyBkZW1vbnN0cmF0ZXMgaG93IHdlIGNhbiBlYXNpbHkgc3dhcCBpbXBsZW1lbnRhdGlvbnMgaW4gaGV4YWdvbmFsIGFyY2hpdGVjdHVyZVxuICovXG5jbGFzcyBJbk1lbW9yeVRhc2tSZXBvc2l0b3J5IGltcGxlbWVudHMgVGFza1JlcG9zaXRvcnkge1xuICBwcml2YXRlIHRhc2tzOiBNYXA8c3RyaW5nLCBUYXNrPiA9IG5ldyBNYXAoKTtcblxuICBhc3luYyBzYXZlKHRhc2s6IFRhc2spOiBQcm9taXNlPFRhc2s+IHtcbiAgICB0aGlzLnRhc2tzLnNldCh0YXNrLmdldElkKCksIHRhc2spO1xuICAgIHJldHVybiB0YXNrO1xuICB9XG5cbiAgYXN5bmMgZmluZEJ5SWQoaWQ6IHN0cmluZyk6IFByb21pc2U8VGFzayB8IG51bGw+IHtcbiAgICBjb25zdCB0YXNrID0gdGhpcy50YXNrcy5nZXQoaWQpO1xuICAgIHJldHVybiB0YXNrIHx8IG51bGw7XG4gIH1cblxuICBhc3luYyBmaW5kQWxsKCk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy50YXNrcy52YWx1ZXMoKSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGUodGFzazogVGFzayk6IFByb21pc2U8VGFzaz4ge1xuICAgIHRoaXMudGFza3Muc2V0KHRhc2suZ2V0SWQoKSwgdGFzayk7XG4gICAgcmV0dXJuIHRhc2s7XG4gIH1cblxuICBhc3luYyBkZWxldGUoaWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLnRhc2tzLmRlbGV0ZShpZCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZXN0IGZ1bmN0aW9uIHRvIGRlbW9uc3RyYXRlIGhleGFnb25hbCBhcmNoaXRlY3R1cmVcbiAqL1xuYXN5bmMgZnVuY3Rpb24gdGVzdEhleGFnb25hbEFyY2hpdGVjdHVyZSgpIHtcbiAgY29uc29sZS5sb2coJ1Rlc3RpbmcgSGV4YWdvbmFsIEFyY2hpdGVjdHVyZS4uLicpO1xuICBcbiAgLy8gQ3JlYXRlIGFuIGluLW1lbW9yeSByZXBvc2l0b3J5IGltcGxlbWVudGF0aW9uXG4gIGNvbnN0IHRhc2tSZXBvc2l0b3J5ID0gbmV3IEluTWVtb3J5VGFza1JlcG9zaXRvcnkoKTtcbiAgXG4gIC8vIENyZWF0ZSB0aGUgc2VydmljZSB3aXRoIHRoZSByZXBvc2l0b3J5XG4gIGNvbnN0IHRhc2tTZXJ2aWNlID0gbmV3IFRhc2tTZXJ2aWNlKHRhc2tSZXBvc2l0b3J5KTtcbiAgXG4gIC8vIENyZWF0ZSBhIG5ldyB0YXNrXG4gIGNvbnNvbGUubG9nKCdDcmVhdGluZyBhIG5ldyB0YXNrLi4uJyk7XG4gIGNvbnN0IHRhc2sgPSBhd2FpdCB0YXNrU2VydmljZS5jcmVhdGVUYXNrKCdUZXN0IFRhc2snLCAnVGhpcyBpcyBhIHRlc3QgdGFzaycpO1xuICBjb25zb2xlLmxvZygnVGFzayBjcmVhdGVkOicsIHRhc2spO1xuICBcbiAgLy8gR2V0IHRoZSB0YXNrIGJ5IElEXG4gIGNvbnNvbGUubG9nKCdcXG5HZXR0aW5nIHRhc2sgYnkgSUQuLi4nKTtcbiAgY29uc3QgcmV0cmlldmVkVGFzayA9IGF3YWl0IHRhc2tTZXJ2aWNlLmdldFRhc2sodGFzay5nZXRJZCgpKTtcbiAgY29uc29sZS5sb2coJ1JldHJpZXZlZCB0YXNrOicsIHJldHJpZXZlZFRhc2spO1xuICBcbiAgLy8gVXBkYXRlIHRoZSB0YXNrXG4gIGNvbnNvbGUubG9nKCdcXG5VcGRhdGluZyB0YXNrLi4uJyk7XG4gIGNvbnN0IHVwZGF0ZWRUYXNrID0gYXdhaXQgdGFza1NlcnZpY2UudXBkYXRlVGFzayh0YXNrLmdldElkKCksICdVcGRhdGVkIFRhc2snLCAnVGhpcyB0YXNrIGhhcyBiZWVuIHVwZGF0ZWQnKTtcbiAgY29uc29sZS5sb2coJ1VwZGF0ZWQgdGFzazonLCB1cGRhdGVkVGFzayk7XG4gIFxuICAvLyBDb21wbGV0ZSB0aGUgdGFza1xuICBjb25zb2xlLmxvZygnXFxuQ29tcGxldGluZyB0YXNrLi4uJyk7XG4gIGNvbnN0IGNvbXBsZXRlZFRhc2sgPSBhd2FpdCB0YXNrU2VydmljZS5jb21wbGV0ZVRhc2sodGFzay5nZXRJZCgpKTtcbiAgY29uc29sZS5sb2coJ0NvbXBsZXRlZCB0YXNrOicsIGNvbXBsZXRlZFRhc2spO1xuICBcbiAgLy8gR2V0IGFsbCB0YXNrc1xuICBjb25zb2xlLmxvZygnXFxuR2V0dGluZyBhbGwgdGFza3MuLi4nKTtcbiAgY29uc3QgYWxsVGFza3MgPSBhd2FpdCB0YXNrU2VydmljZS5nZXRBbGxUYXNrcygpO1xuICBjb25zb2xlLmxvZygnQWxsIHRhc2tzOicsIGFsbFRhc2tzKTtcbiAgXG4gIC8vIERlbGV0ZSB0aGUgdGFza1xuICBjb25zb2xlLmxvZygnXFxuRGVsZXRpbmcgdGFzay4uLicpO1xuICBjb25zdCBkZWxldGVkID0gYXdhaXQgdGFza1NlcnZpY2UuZGVsZXRlVGFzayh0YXNrLmdldElkKCkpO1xuICBjb25zb2xlLmxvZygnVGFzayBkZWxldGVkOicsIGRlbGV0ZWQpO1xuICBcbiAgLy8gVmVyaWZ5IHRhc2sgaXMgZGVsZXRlZFxuICBjb25zb2xlLmxvZygnXFxuVmVyaWZ5aW5nIHRhc2sgaXMgZGVsZXRlZC4uLicpO1xuICBjb25zdCBkZWxldGVkVGFzayA9IGF3YWl0IHRhc2tTZXJ2aWNlLmdldFRhc2sodGFzay5nZXRJZCgpKTtcbiAgY29uc29sZS5sb2coJ1Rhc2sgYWZ0ZXIgZGVsZXRpb24gKHNob3VsZCBiZSBudWxsKTonLCBkZWxldGVkVGFzayk7XG59XG5cbi8vIFJ1biB0aGUgdGVzdFxudGVzdEhleGFnb25hbEFyY2hpdGVjdHVyZSgpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuIl19