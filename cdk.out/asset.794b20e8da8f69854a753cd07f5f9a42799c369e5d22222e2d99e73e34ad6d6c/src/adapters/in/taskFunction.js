"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const DynamoDBTaskRepository_1 = require("../out/DynamoDBTaskRepository");
const TaskService_1 = require("../../application/services/TaskService");
const TaskLambdaHandler_1 = require("./TaskLambdaHandler");
const EventBridgePublisher_1 = require("../out/EventBridgePublisher");
/**
 * Environment variables expected to be set in the Lambda function
 */
const REGION = process.env.REGION || 'us-east-1';
const TABLE_NAME = process.env.TASK_TABLE_NAME || '';
const EVENT_BUS_NAME = process.env.EVENT_BUS_NAME || '';
// Wire up the dependencies using dependency injection
const taskRepository = new DynamoDBTaskRepository_1.DynamoDBTaskRepository(REGION, TABLE_NAME);
const eventPublisher = EVENT_BUS_NAME ? new EventBridgePublisher_1.EventBridgePublisher(EVENT_BUS_NAME, REGION) : undefined;
const taskService = new TaskService_1.TaskService(taskRepository, eventPublisher);
const taskHandler = new TaskLambdaHandler_1.TaskLambdaHandler(taskService);
/**
 * Lambda function handler
 */
const handler = async (event) => {
    console.log('Event received:', JSON.stringify(event, null, 2));
    // Handle CORS preflight requests
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,PUT,DELETE,PATCH'
            },
            body: ''
        };
    }
    return taskHandler.handle(event);
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFza0Z1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FkYXB0ZXJzL2luL3Rhc2tGdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwwRUFBdUU7QUFDdkUsd0VBQXFFO0FBQ3JFLDJEQUF3RDtBQUN4RCxzRUFBbUU7QUFFbkU7O0dBRUc7QUFDSCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxXQUFXLENBQUM7QUFDakQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDO0FBQ3JELE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQztBQUV4RCxzREFBc0Q7QUFDdEQsTUFBTSxjQUFjLEdBQUcsSUFBSSwrQ0FBc0IsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDdEUsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLDJDQUFvQixDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ3JHLE1BQU0sV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDcEUsTUFBTSxXQUFXLEdBQUcsSUFBSSxxQ0FBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUV2RDs7R0FFRztBQUNJLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFrQyxFQUFFO0lBQzNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0QsaUNBQWlDO0lBQ2pDLElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUNuQyxPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUU7Z0JBQ1AsNkJBQTZCLEVBQUUsR0FBRztnQkFDbEMsOEJBQThCLEVBQUUsNEJBQTRCO2dCQUM1RCw4QkFBOEIsRUFBRSxtQ0FBbUM7YUFDcEU7WUFDRCxJQUFJLEVBQUUsRUFBRTtTQUNULENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQztBQWpCVyxRQUFBLE9BQU8sV0FpQmxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgRHluYW1vREJUYXNrUmVwb3NpdG9yeSB9IGZyb20gJy4uL291dC9EeW5hbW9EQlRhc2tSZXBvc2l0b3J5JztcbmltcG9ydCB7IFRhc2tTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYXBwbGljYXRpb24vc2VydmljZXMvVGFza1NlcnZpY2UnO1xuaW1wb3J0IHsgVGFza0xhbWJkYUhhbmRsZXIgfSBmcm9tICcuL1Rhc2tMYW1iZGFIYW5kbGVyJztcbmltcG9ydCB7IEV2ZW50QnJpZGdlUHVibGlzaGVyIH0gZnJvbSAnLi4vb3V0L0V2ZW50QnJpZGdlUHVibGlzaGVyJztcblxuLyoqXG4gKiBFbnZpcm9ubWVudCB2YXJpYWJsZXMgZXhwZWN0ZWQgdG8gYmUgc2V0IGluIHRoZSBMYW1iZGEgZnVuY3Rpb25cbiAqL1xuY29uc3QgUkVHSU9OID0gcHJvY2Vzcy5lbnYuUkVHSU9OIHx8ICd1cy1lYXN0LTEnO1xuY29uc3QgVEFCTEVfTkFNRSA9IHByb2Nlc3MuZW52LlRBU0tfVEFCTEVfTkFNRSB8fCAnJztcbmNvbnN0IEVWRU5UX0JVU19OQU1FID0gcHJvY2Vzcy5lbnYuRVZFTlRfQlVTX05BTUUgfHwgJyc7XG5cbi8vIFdpcmUgdXAgdGhlIGRlcGVuZGVuY2llcyB1c2luZyBkZXBlbmRlbmN5IGluamVjdGlvblxuY29uc3QgdGFza1JlcG9zaXRvcnkgPSBuZXcgRHluYW1vREJUYXNrUmVwb3NpdG9yeShSRUdJT04sIFRBQkxFX05BTUUpO1xuY29uc3QgZXZlbnRQdWJsaXNoZXIgPSBFVkVOVF9CVVNfTkFNRSA/IG5ldyBFdmVudEJyaWRnZVB1Ymxpc2hlcihFVkVOVF9CVVNfTkFNRSwgUkVHSU9OKSA6IHVuZGVmaW5lZDtcbmNvbnN0IHRhc2tTZXJ2aWNlID0gbmV3IFRhc2tTZXJ2aWNlKHRhc2tSZXBvc2l0b3J5LCBldmVudFB1Ymxpc2hlcik7XG5jb25zdCB0YXNrSGFuZGxlciA9IG5ldyBUYXNrTGFtYmRhSGFuZGxlcih0YXNrU2VydmljZSk7XG5cbi8qKlxuICogTGFtYmRhIGZ1bmN0aW9uIGhhbmRsZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50KTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcbiAgY29uc29sZS5sb2coJ0V2ZW50IHJlY2VpdmVkOicsIEpTT04uc3RyaW5naWZ5KGV2ZW50LCBudWxsLCAyKSk7XG4gIFxuICAvLyBIYW5kbGUgQ09SUyBwcmVmbGlnaHQgcmVxdWVzdHNcbiAgaWYgKGV2ZW50Lmh0dHBNZXRob2QgPT09ICdPUFRJT05TJykge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXG4gICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJzogJ0NvbnRlbnQtVHlwZSxBdXRob3JpemF0aW9uJyxcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnOiAnT1BUSU9OUyxQT1NULEdFVCxQVVQsREVMRVRFLFBBVENIJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6ICcnXG4gICAgfTtcbiAgfVxuICBcbiAgcmV0dXJuIHRhc2tIYW5kbGVyLmhhbmRsZShldmVudCk7XG59O1xuIl19